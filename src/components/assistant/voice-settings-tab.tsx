
"use client";

import React, { useState, useEffect } from 'react';
import { useFormContext, Controller } from 'react-hook-form';
import { useFormState, useFormStatus } from 'react-dom';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Slider } from '@/components/ui/slider';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Volume2, Settings, SlidersHorizontal, ListFilter, Palette, Sparkles, AlertCircle, Loader2, Info, UploadCloud, FileText, X, PlayCircle } from 'lucide-react';
import type { AssistantConfig, VoiceConfig } from '@/types';
import { useToast } from "@/hooks/use-toast";
import { synthesizeSpeech, type SynthesizeSpeechInput } from '@/ai/flows/synthesize-speech-flow';
import { synthesizeElevenLabsSpeech, type ElevenLabsSpeechState } from '@/app/actions/elevenlabs-actions';


const VOICE_PROVIDERS = [{ id: 'elevenlabs', name: 'ElevenLabs' }];
const ELEVENLABS_VOICES = [ 
  { id: '21m00Tcm4TlvDq8ikWAM', name: 'Rachel (F, American, Calm)' },
  { id: '29vD33N1CtxCmqQRPOHJ', name: 'Drew (M, American, Conversational)' },
  { id: '2EiwWnXFnvU5JabPnv8n', name: 'Clyde (M, American, Deep)' },
  { id: '5Q0t7uMcjvnagumLfvZi', name: 'Paul (M, American, Authoritative)' },
  { id: 'AZnzlk1XvdvUeBnXmlld', name: 'Domi (F, American, Strong)' },
  { id: 'CYw3kZ02Hs0563khs1Fj', name: 'Dave (M, British, Conversational)' },
  { id: 'D38z5RcWu1voky8WS1ja', name: 'Fin (M, British, Deep)' },
  { id: 'EXAVITQu4vr4xnSDxMaL', name: 'Sarah (F, American, Sweet)' },
  { id: 'ErXwobaYiN019P7OCKZ9', name: 'Antoni (M, American, Well-rounded)' },
  { id: 'GBv7mTt0atIp3Br8iCZE', name: 'Thomas (M, American, Calm)' },
  { id: 'MF3mGyEYCl7XYWbV9V6O', name: 'Charlie (M, Australian, Casual)' },
  { id: 'SOYHLrjzK2X1ezoPC6cr', name: 'George (M, British, Raspy)' },
  { id: 'TX3LPaxmHKxFdv7VOQHJ', name: 'Matthew (M, British, Full-bodied)' },
  { id: 'ThT5KcBeYPX3keUQqHPh', name: 'Dorothy (F, British, Pleasant)' },
  { id: 'TxGEqnHWrfWFTfGW9XjX', name: 'Bella (F, American, Soft)' },
  { id: 'VR6AewLTigWG4xSOukaG', name: 'Arnold (M, American, Crisp)' },
  { id: 'VOYVp58_m8j7l6n9042i', name: 'Freya (F, American, Overhyped)'},
  { id: 'Yko7PKHZNXotIFUBG7I9', name: 'Grace (F, American, Soft)' },
  { id: 'ZQe5CZNOzWTMGPFeQj2S', name: 'Daniel (M, British, Deep)' },
  { id: 'XrExE9yKIg1WjnnlVkGX', name: 'James (M, British, Old)' },
  { id: 'bVMeCyTHy58xNoL34h3p', name: 'Gigi (F, American, Childlish)' },
  { id: 'g5CIjZEefAph4nQFvHAz', name: 'Liam (M, American, Neutral)' },
  { id: 'jBpfuIE2acCO8z3wKNLl', name: 'Nicole (F, American, Whispering)' },
  { id: 'jsCqWAovK2LkecY7zX02', name: 'Bill (M, American, Strong)' },
  { id: 'piTKgcLEGmPE4e6mEKli', name: 'Adam (M, American, Deep)' },
  { id: 'pqHkRDMhZ9xky8V6UeVD', name: 'Alice (F, British, Sweet)' },
  { id: 't0jbNlBVZ17f02VDIeMI', name: 'Jeremy (M, American, Raspy)' },
  { id: 'z9fAnxQcWzI9SwUxBBKk', name: 'Glinda (F, American, Soft)' },
  { id: 'zcAOhNBS3c14rBihAFp1', name: 'Joseph (M, British, Neutral)' },
  { id: 'zqn6B32R982AIa32P4zD', name: 'Serena (F, American, Pleasant)' },
];
const LANGUAGES = [ 
  { id: 'en-US', name: 'English (US)' },
  { id: 'en-GB', name: 'English (UK)' },
  { id: 'es-ES', name: 'Español (España)' },
  { id: 'fr-FR', name: 'Français (France)' },
];
const BACKGROUND_SOUNDS = [
  { id: 'default', name: 'Default (No Background)' },
  { id: 'office', name: 'Ambient Office' },
  { id: 'cafe', name: 'Ambient Cafe' },
  { id: 'nature', name: 'Ambient Nature' },
  { id: 'white_noise_brown', name: 'White Noise (Brown)' },
  { id: 'white_noise_pink', name: 'White Noise (Pink)' },
  { id: 'custom', name: 'Custom URL' },
];

const EMOTIONS = [ 
    { id: 'neutral', name: 'Neutral' },
    { id: 'happy', name: 'Happy' },
    { id: 'sad', name: 'Sad' },
    { id: 'angry', name: 'Angry' },
    { id: 'excited', name: 'Excited' },
    { id: 'friendly', name: 'Friendly' },
];

const TONES = [ 
    { id: 'neutral', name: 'Neutral' },
    { id: 'professional', name: 'Professional' },
    { id: 'casual', name: 'Casual' },
    { id: 'authoritative', name: 'Authoritative' },
    { id: 'creative', name: 'Creative' },
];

const SAMPLE_PREVIEW_TEXT = "Hello, this is a sample of my voice. I hope you like the way I sound with the current settings!";
const ACTUAL_PREVIEW_TEXT = "This is an actual audio preview generated by ElevenLabs.";

function SubmitActualPreviewButton() {
  const { pending } = useFormStatus();
  return (
    <Button type="submit" variant="default" disabled={pending} className="w-full md:w-auto">
      {pending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <PlayCircle className="mr-2 h-4 w-4" />}
      Play Actual Preview (ElevenLabs)
    </Button>
  );
}


export default function VoiceSettingsTab() {
  const { control, watch, setValue, getValues, formState: { errors } } = useFormContext<AssistantConfig>();
  const { toast } = useToast();
  const [isSimulatingPreview, setIsSimulatingPreview] = useState(false);
  const [customPunctuationInput, setCustomPunctuationInput] = useState('');
  const [currentAudio, setCurrentAudio] = useState<HTMLAudioElement | null>(null);

  const voiceConfig = watch('voice') as VoiceConfig;
  const backgroundSoundType = watch('voice.backgroundSound');
  const customPunctuationList = watch('voice.customPunctuation', []);

  const initialElevenLabsState: ElevenLabsSpeechState = { success: false };
  const [elevenLabsState, formAction] = useFormState(synthesizeElevenLabsSpeech, initialElevenLabsState);


  useEffect(() => {
    if (elevenLabsState.success && elevenLabsState.audioBase64) {
      if (currentAudio) {
        currentAudio.pause();
      }
      const audio = new Audio(`data:audio/mpeg;base64,${elevenLabsState.audioBase64}`);
      setCurrentAudio(audio);
      audio.play().catch(e => {
        console.error("Error playing audio:", e);
        toast({
          title: "Audio Playback Error",
          description: "Could not play the synthesized audio. Check console for details.",
          variant: "destructive",
        });
      });
      toast({
        title: "Audio Preview Playing",
        description: "ElevenLabs audio preview is now playing.",
      });
    } else if (!elevenLabsState.success && elevenLabsState.error) {
      toast({
        title: "ElevenLabs Preview Error",
        description: elevenLabsState.error,
        variant: "destructive",
      });
    }
  }, [elevenLabsState, toast, currentAudio]);


  const handleAddCustomPunctuation = () => {
    if (customPunctuationInput.trim() && !customPunctuationList.includes(customPunctuationInput.trim())) {
      setValue('voice.customPunctuation', [...customPunctuationList, customPunctuationInput.trim()], { shouldDirty: true });
      setCustomPunctuationInput('');
    }
  };

  const handleRemoveCustomPunctuation = (puncToRemove: string) => {
    setValue('voice.customPunctuation', customPunctuationList.filter(p => p !== puncToRemove), { shouldDirty: true });
  };

  const handleSimulatedPreviewVoice = async () => {
    if (!voiceConfig) {
      toast({
        title: "Configuration Error",
        description: "Voice configuration is not available.",
        variant: "destructive",
      });
      return;
    }
    setIsSimulatingPreview(true);
    try {
      const input: SynthesizeSpeechInput = {
        textToSynthesize: SAMPLE_PREVIEW_TEXT,
        voiceId: voiceConfig.voiceId,
        language: voiceConfig.language,
        speakingRate: voiceConfig.speakingRate,
        pitch: voiceConfig.pitch,
        emotion: voiceConfig.emotion,
        tone: voiceConfig.tone,
      };
      const result = await synthesizeSpeech(input);
      toast({
        title: "Voice Preview Simulation",
        description: result.synthesizedSpeechDescription,
        duration: 10000, 
      });
    } catch (error) {
      console.error("Error simulating speech synthesis:", error);
      toast({
        title: "Preview Error",
        description: `Could not simulate voice preview. ${error instanceof Error ? error.message : 'Unknown error.'}`,
        variant: "destructive",
      });
    } finally {
      setIsSimulatingPreview(false);
    }
  };

  return (
    <div className="space-y-8 p-1">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center"><Volume2 className="mr-2 h-5 w-5 text-primary" /> Voice Configuration</CardTitle>
          <CardDescription>Select voice synthesis provider, voice, language, and preview.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <Label htmlFor="voice.provider">Provider</Label>
              <Controller
                name="voice.provider"
                control={control}
                render={({ field }) => (
                  <Select onValueChange={field.onChange} value={field.value} disabled>
                    <SelectTrigger id="voice.provider" className="mt-1">
                      <SelectValue placeholder="Select provider" />
                    </SelectTrigger>
                    <SelectContent>
                      {VOICE_PROVIDERS.map(p => <SelectItem key={p.id} value={p.id}>{p.name}</SelectItem>)}
                    </SelectContent>
                  </Select>
                )}
              />
              {errors.voice?.provider && <p className="text-sm text-destructive mt-1">{errors.voice.provider.message}</p>}
              <p className="text-xs text-muted-foreground mt-1">ElevenLabs is currently the only provider.</p>
            </div>
            <div>
              <Label htmlFor="voice.voiceId">Voice</Label>
              <Controller
                name="voice.voiceId"
                control={control}
                render={({ field }) => (
                  <Select onValueChange={field.onChange} value={field.value}>
                    <SelectTrigger id="voice.voiceId" className="mt-1">
                      <SelectValue placeholder="Select voice" />
                    </SelectTrigger>
                    <SelectContent>
                      {ELEVENLABS_VOICES.map(v => <SelectItem key={v.id} value={v.id}>{v.name}</SelectItem>)}
                    </SelectContent>
                  </Select>
                )}
              />
              {errors.voice?.voiceId && <p className="text-sm text-destructive mt-1">{errors.voice.voiceId.message}</p>}
            </div>
            <div>
              <Label htmlFor="voice.language">Language</Label>
              <Controller
                name="voice.language"
                control={control}
                render={({ field }) => (
                  <Select onValueChange={field.onChange} value={field.value} disabled>
                    <SelectTrigger id="voice.language" className="mt-1">
                      <SelectValue placeholder="Select language" />
                    </SelectTrigger>
                    <SelectContent>
                      {LANGUAGES.map(l => <SelectItem key={l.id} value={l.id}>{l.name}</SelectItem>)}
                    </SelectContent>
                  </Select>
                )}
              />
              {errors.voice?.language && <p className="text-sm text-destructive mt-1">{errors.voice.language.message}</p>}
               <p className="text-xs text-muted-foreground mt-1">Language is inferred by ElevenLabs voice choice.</p>
            </div>
          </div>
          <div className="space-y-3 md:space-y-0 md:flex md:space-x-3">
            <Button type="button" variant="outline" onClick={handleSimulatedPreviewVoice} disabled={isSimulatingPreview} className="w-full md:w-auto">
              {isSimulatingPreview ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Volume2 className="mr-2 h-4 w-4" />}
              Simulate Voice Preview (Description)
            </Button>
            {isSimulatingPreview && <p className="text-sm text-muted-foreground mt-2 md:mt-0 md:ml-2 self-center">Generating simulated voice description...</p>}
            
            <form action={formAction} className="w-full md:w-auto">
              <input type="hidden" name="text" value={ACTUAL_PREVIEW_TEXT} />
              <input type="hidden" name="voiceId" value={voiceConfig?.voiceId || ''} />
              {/* Add other relevant voice params if needed by API */}
              {/* Example: <input type="hidden" name="modelId" value={voiceConfig?.elevenLabsModelId || 'eleven_multilingual_v2'} /> */}
              <SubmitActualPreviewButton />
            </form>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center"><Settings className="mr-2 h-5 w-5 text-primary" /> Additional Configuration</CardTitle>
          <CardDescription>Customize background audio and core speech parameters.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <h4 className="text-md font-medium">Background Sound Settings</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 items-end">
            <div>
              <Label htmlFor="voice.backgroundSound">Sound Selection</Label>
              <Controller
                name="voice.backgroundSound"
                control={control}
                render={({ field }) => (
                  <Select onValueChange={field.onChange} value={field.value}>
                    <SelectTrigger id="voice.backgroundSound" className="mt-1">
                      <SelectValue placeholder="Select background sound" />
                    </SelectTrigger>
                    <SelectContent>
                      {BACKGROUND_SOUNDS.map(s => <SelectItem key={s.id} value={s.id}>{s.name}</SelectItem>)}
                    </SelectContent>
                  </Select>
                )}
              />
               {errors.voice?.backgroundSound && <p className="text-sm text-destructive mt-1">{errors.voice.backgroundSound.message}</p>}
            </div>
            {backgroundSoundType === 'custom' && (
              <div>
                <Label htmlFor="voice.backgroundSoundUrl">Custom Background Sound URL</Label>
                <Controller
                  name="voice.backgroundSoundUrl"
                  control={control}
                  render={({ field }) => <Input id="voice.backgroundSoundUrl" {...field} value={field.value || ''} className="mt-1" placeholder="https://example.com/audio.mp3" />}
                />
                {errors.voice?.backgroundSoundUrl && <p className="text-sm text-destructive mt-1">{errors.voice.backgroundSoundUrl.message}</p>}
              </div>
            )}
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 items-center">
             <div>
                <Label htmlFor="voice.backgroundVolume">Background Volume: {voiceConfig?.backgroundVolume !== undefined ? Math.round(voiceConfig.backgroundVolume * 100) : 'N/A'}%</Label>
                <Controller
                  name="voice.backgroundVolume"
                  control={control}
                  render={({ field }) => (
                    <Slider
                      id="voice.backgroundVolume"
                      min={0} max={1} step={0.01}
                      value={[field.value]}
                      onValueChange={(value) => field.onChange(value[0])}
                      className="mt-3"
                    />
                  )}
                />
                {errors.voice?.backgroundVolume && <p className="text-sm text-destructive mt-1">{errors.voice.backgroundVolume.message}</p>}
              </div>
            <div className="flex items-center space-x-2 pt-6">
              <Controller
                name="voice.loopBackgroundSound"
                control={control}
                render={({ field }) => <Switch id="voice.loopBackgroundSound" checked={field.value} onCheckedChange={field.onChange} />}
              />
              <Label htmlFor="voice.loopBackgroundSound">Loop Background Sound</Label>
            </div>
          </div>

          <h4 className="text-md font-medium mt-4">Core Speech Parameters</h4>
           <div>
              <Label htmlFor="voice.inputMinCharacters">Input Min Characters for Speech</Label>
              <Controller
                name="voice.inputMinCharacters"
                control={control}
                render={({ field }) => (
                   <Input id="voice.inputMinCharacters" type="number" {...field} 
                    value={field.value || 0}
                    onChange={e => field.onChange(parseInt(e.target.value, 10) || 0)}
                    className="mt-1 w-32" 
                  />
                )}
              />
              {errors.voice?.inputMinCharacters && <p className="text-sm text-destructive mt-1">{errors.voice.inputMinCharacters.message}</p>}
            </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <Label htmlFor="voice.speakingRate">Speaking Rate: {voiceConfig?.speakingRate?.toFixed(1)}x</Label>
              <Controller
                name="voice.speakingRate"
                control={control}
                render={({ field }) => (
                  <Slider id="voice.speakingRate" min={0.5} max={2} step={0.1} value={[field.value]} onValueChange={(value) => field.onChange(value[0])} className="mt-3" />
                )}
              />
              {errors.voice?.speakingRate && <p className="text-sm text-destructive mt-1">{errors.voice.speakingRate.message}</p>}
            </div>
            <div>
              <Label htmlFor="voice.pitch">Pitch: {voiceConfig?.pitch?.toFixed(1)}x</Label>
              <Controller
                name="voice.pitch"
                control={control}
                render={({ field }) => (
                  <Slider id="voice.pitch" min={0.5} max={2} step={0.1} value={[field.value]} onValueChange={(value) => field.onChange(value[0])} className="mt-3" />
                )}
              />
              {errors.voice?.pitch && <p className="text-sm text-destructive mt-1">{errors.voice.pitch.message}</p>}
            </div>
            <div>
              <Label htmlFor="voice.masterVolume">Master Volume: {voiceConfig?.masterVolume !== undefined ? Math.round(voiceConfig.masterVolume * 100) : 'N/A'}%</Label>
              <Controller
                name="voice.masterVolume"
                control={control}
                render={({ field }) => (
                  <Slider id="voice.masterVolume" min={0} max={1} step={0.01} value={[field.value]} onValueChange={(value) => field.onChange(value[0])} className="mt-3" />
                )}
              />
              {errors.voice?.masterVolume && <p className="text-sm text-destructive mt-1">{errors.voice.masterVolume.message}</p>}
            </div>
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center"><ListFilter className="mr-2 h-5 w-5 text-primary" /> Punctuation & Chunking</CardTitle>
          <CardDescription>Configure speech chunking, pauses, and custom punctuation.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
            <div>
                <Label htmlFor="voice.punctuationBoundaries">Default Punctuation Boundaries (comma-separated)</Label>
                <Controller
                    name="voice.punctuationBoundaries"
                    control={control}
                    render={({ field }) => (
                        <Input 
                            id="voice.punctuationBoundaries"
                            value={Array.isArray(field.value) ? field.value.join(',') : ''}
                            onChange={(e) => field.onChange(e.target.value.split(',').map(s => s.trim()).filter(Boolean))}
                            className="mt-1"
                            placeholder="e.g., .,?,!"
                        />
                    )}
                />
                {errors.voice?.punctuationBoundaries && <p className="text-sm text-destructive mt-1">{typeof errors.voice.punctuationBoundaries.message === 'string' ? errors.voice.punctuationBoundaries.message : 'Invalid input'}</p>}
            </div>

            <div>
                <Label htmlFor="voice.customPunctuation">Custom Punctuation (for speech breaks)</Label>
                <div className="flex items-center gap-2 mt-1">
                    <Input 
                        id="customPunctuationInput"
                        value={customPunctuationInput}
                        onChange={(e) => setCustomPunctuationInput(e.target.value)}
                        placeholder="e.g., -- or ..."
                        className="flex-grow"
                    />
                    <Button type="button" onClick={handleAddCustomPunctuation}>Add</Button>
                </div>
                {customPunctuationList.length > 0 && (
                    <div className="mt-2 space-x-2">
                        {customPunctuationList.map(punc => (
                            <span key={punc} className="inline-flex items-center px-2 py-1 bg-muted text-muted-foreground rounded-md text-sm">
                                {punc}
                                <Button variant="ghost" size="icon" onClick={() => handleRemoveCustomPunctuation(punc)} className="ml-1 h-5 w-5">
                                    <X className="h-3 w-3" />
                                </Button>
                            </span>
                        ))}
                    </div>
                )}
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                    <Label htmlFor="voice.pauseDurations.comma">Comma Pause (ms)</Label>
                     <Controller name="voice.pauseDurations.comma" control={control} render={({ field }) => <Input type="number" {...field} value={field.value || ''} onChange={e => field.onChange(parseInt(e.target.value,10) || 0)} className="mt-1" />} />
                </div>
                <div>
                    <Label htmlFor="voice.pauseDurations.period">Period Pause (ms)</Label>
                     <Controller name="voice.pauseDurations.period" control={control} render={({ field }) => <Input type="number" {...field} value={field.value || ''} onChange={e => field.onChange(parseInt(e.target.value,10) || 0)} className="mt-1" />} />
                </div>
                <div>
                    <Label htmlFor="voice.pauseDurations.semicolon">Semicolon Pause (ms)</Label>
                     <Controller name="voice.pauseDurations.semicolon" control={control} render={({ field }) => <Input type="number" {...field} value={field.value || ''} onChange={e => field.onChange(parseInt(e.target.value,10) || 0)} className="mt-1" />} />
                </div>
            </div>
             <div className="flex items-center space-x-2 pt-2">
              <Controller
                name="voice.smartChunking"
                control={control}
                render={({ field }) => <Switch id="voice.smartChunking" checked={field.value} onCheckedChange={field.onChange} />}
              />
              <Label htmlFor="voice.smartChunking">Enable Smart Chunking (intelligent sentence/phrase breaking)</Label>
            </div>
            <p className="text-xs text-muted-foreground mt-1">Note: Actual effect of these settings depends on the chosen TTS provider's capabilities.</p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center"><Palette className="mr-2 h-5 w-5 text-primary" /> Emotion, Tone & Effects</CardTitle>
          <CardDescription>Adjust voice emotion, tone, and apply real-time processing effects. (Provider-dependent)</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Label htmlFor="voice.emotion">Emotion</Label>
              <Controller
                name="voice.emotion"
                control={control}
                render={({ field }) => (
                  <Select onValueChange={field.onChange} value={field.value}>
                    <SelectTrigger id="voice.emotion" className="mt-1">
                      <SelectValue placeholder="Select emotion" />
                    </SelectTrigger>
                    <SelectContent>
                      {EMOTIONS.map(e => <SelectItem key={e.id} value={e.id}>{e.name}</SelectItem>)}
                    </SelectContent>
                  </Select>
                )}
              />
            </div>
            <div>
              <Label htmlFor="voice.tone">Tone</Label>
              <Controller
                name="voice.tone"
                control={control}
                render={({ field }) => (
                  <Select onValueChange={field.onChange} value={field.value}>
                    <SelectTrigger id="voice.tone" className="mt-1">
                      <SelectValue placeholder="Select tone" />
                    </SelectTrigger>
                    <SelectContent>
                      {TONES.map(t => <SelectItem key={t.id} value={t.id}>{t.name}</SelectItem>)}
                    </SelectContent>
                  </Select>
                )}
              />
            </div>
          </div>
          <h4 className="text-md font-medium mt-4">Voice Effects & Processing</h4>
            <div className="space-y-3">
                <div className="flex items-center justify-between">
                    <Label htmlFor="voice.voiceEffects.echo">Echo Effect</Label>
                    <Controller name="voice.voiceEffects.echo" control={control} render={({ field }) => <Switch id="voice.voiceEffects.echo" checked={field.value} onCheckedChange={field.onChange} />} />
                </div>
                <div className="flex items-center justify-between">
                    <Label htmlFor="voice.voiceEffects.reverb">Reverb Effect</Label>
                    <Controller name="voice.voiceEffects.reverb" control={control} render={({ field }) => <Switch id="voice.voiceEffects.reverb" checked={field.value} onCheckedChange={field.onChange} />} />
                </div>
                <div className="flex items-center justify-between">
                    <Label htmlFor="voice.voiceEffects.clarityEnhancement">Clarity Enhancement</Label>
                    <Controller name="voice.voiceEffects.clarityEnhancement" control={control} render={({ field }) => <Switch id="voice.voiceEffects.clarityEnhancement" checked={field.value} onCheckedChange={field.onChange} />} />
                </div>
                <div className="flex items-center justify-between">
                    <Label htmlFor="voice.noiseReduction">Background Noise Reduction (for synthesized voice)</Label>
                    <Controller name="voice.noiseReduction" control={control} render={({ field }) => <Switch id="voice.noiseReduction" checked={field.value} onCheckedChange={field.onChange} />} />
                </div>
            </div>
             <h4 className="text-md font-medium mt-4">Audio Quality Output</h4>
             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <Label htmlFor="voice.audioQuality.bitrate">Bitrate (kbps)</Label>
                     <Controller name="voice.audioQuality.bitrate" control={control} render={({ field }) => <Input type="number" {...field} value={field.value || ''} onChange={e => field.onChange(parseInt(e.target.value,10) || 0)} className="mt-1" placeholder="e.g., 128" />} />
                </div>
                 <div>
                    <Label htmlFor="voice.audioQuality.sampleRate">Sample Rate (Hz)</Label>
                     <Controller name="voice.audioQuality.sampleRate" control={control} render={({ field }) => <Input type="number" {...field} value={field.value || ''} onChange={e => field.onChange(parseInt(e.target.value,10) || 0)} className="mt-1" placeholder="e.g., 24000" />} />
                </div>
            </div>
            <p className="text-xs text-muted-foreground mt-1">Availability of emotion, tone, and effects are highly dependent on the selected TTS provider and voice.</p>
        </CardContent>
      </Card>
      
      <div className="p-4 my-4 border border-dashed border-accent/50 rounded-lg bg-accent/10 text-accent-foreground flex items-center">
        <AlertCircle size={20} className="mr-3 text-accent flex-shrink-0" />
        <div>
            <h4 className="font-semibold">Developer Note:</h4>
            <p className="text-sm">
                The "Play Actual Preview" button now uses your ElevenLabs API key to generate real audio.
                Dynamic voice/language loading, custom punctuation effects, and the precise effect of advanced settings (emotion, tone, effects) require deeper integration with specific TTS provider APIs.
            </p>
        </div>
      </div>
    </div>
  );
}
